Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> calc
Rule 1     calc -> expression
Rule 2     calc -> var_assign
Rule 3     calc -> empty
Rule 4     var_assign -> NAME EQUALS expression
Rule 5     var_assign -> NAME EQUALS NORMSTRING
Rule 6     expression -> expression MULTIPLY expression
Rule 7     expression -> expression DIVIDE expression
Rule 8     expression -> expression PLUS expression
Rule 9     expression -> expression MINUS expression
Rule 10    expression -> expression EXPONENTIATION expression
Rule 11    expression -> INT
Rule 12    expression -> FLOAT
Rule 13    expression -> NAME
Rule 14    expression -> LPAREN expression RPAREN
Rule 15    empty -> <empty>

Terminals, with rules where they appear

COMMENT              : 
DIVIDE               : 7
EQUALS               : 4 5
EXPONENTIATION       : 10
FLOAT                : 12
INT                  : 11
LPAREN               : 14
MINUS                : 9
MULTIPLY             : 6
NAME                 : 4 5 13
NORMSTRING           : 5
PLUS                 : 8
RPAREN               : 14
error                : 

Nonterminals, with rules where they appear

calc                 : 0
empty                : 3
expression           : 1 4 6 6 7 7 8 8 9 9 10 10 14
var_assign           : 2

Parsing method: LALR

state 0

    (0) S' -> . calc
    (1) calc -> . expression
    (2) calc -> . var_assign
    (3) calc -> . empty
    (6) expression -> . expression MULTIPLY expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . expression EXPONENTIATION expression
    (11) expression -> . INT
    (12) expression -> . FLOAT
    (13) expression -> . NAME
    (14) expression -> . LPAREN expression RPAREN
    (4) var_assign -> . NAME EQUALS expression
    (5) var_assign -> . NAME EQUALS NORMSTRING
    (15) empty -> .

    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    NAME            shift and go to state 7
    LPAREN          shift and go to state 8
    $end            reduce using rule 15 (empty -> .)

    calc                           shift and go to state 1
    expression                     shift and go to state 2
    var_assign                     shift and go to state 3
    empty                          shift and go to state 4

state 1

    (0) S' -> calc .



state 2

    (1) calc -> expression .
    (6) expression -> expression . MULTIPLY expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression
    (10) expression -> expression . EXPONENTIATION expression

    $end            reduce using rule 1 (calc -> expression .)
    MULTIPLY        shift and go to state 9
    DIVIDE          shift and go to state 10
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    EXPONENTIATION  shift and go to state 13


state 3

    (2) calc -> var_assign .

    $end            reduce using rule 2 (calc -> var_assign .)


state 4

    (3) calc -> empty .

    $end            reduce using rule 3 (calc -> empty .)


state 5

    (11) expression -> INT .

    MULTIPLY        reduce using rule 11 (expression -> INT .)
    DIVIDE          reduce using rule 11 (expression -> INT .)
    PLUS            reduce using rule 11 (expression -> INT .)
    MINUS           reduce using rule 11 (expression -> INT .)
    EXPONENTIATION  reduce using rule 11 (expression -> INT .)
    $end            reduce using rule 11 (expression -> INT .)
    RPAREN          reduce using rule 11 (expression -> INT .)


state 6

    (12) expression -> FLOAT .

    MULTIPLY        reduce using rule 12 (expression -> FLOAT .)
    DIVIDE          reduce using rule 12 (expression -> FLOAT .)
    PLUS            reduce using rule 12 (expression -> FLOAT .)
    MINUS           reduce using rule 12 (expression -> FLOAT .)
    EXPONENTIATION  reduce using rule 12 (expression -> FLOAT .)
    $end            reduce using rule 12 (expression -> FLOAT .)
    RPAREN          reduce using rule 12 (expression -> FLOAT .)


state 7

    (13) expression -> NAME .
    (4) var_assign -> NAME . EQUALS expression
    (5) var_assign -> NAME . EQUALS NORMSTRING

    MULTIPLY        reduce using rule 13 (expression -> NAME .)
    DIVIDE          reduce using rule 13 (expression -> NAME .)
    PLUS            reduce using rule 13 (expression -> NAME .)
    MINUS           reduce using rule 13 (expression -> NAME .)
    EXPONENTIATION  reduce using rule 13 (expression -> NAME .)
    $end            reduce using rule 13 (expression -> NAME .)
    EQUALS          shift and go to state 14


state 8

    (14) expression -> LPAREN . expression RPAREN
    (6) expression -> . expression MULTIPLY expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . expression EXPONENTIATION expression
    (11) expression -> . INT
    (12) expression -> . FLOAT
    (13) expression -> . NAME
    (14) expression -> . LPAREN expression RPAREN

    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    NAME            shift and go to state 16
    LPAREN          shift and go to state 8

    expression                     shift and go to state 15

state 9

    (6) expression -> expression MULTIPLY . expression
    (6) expression -> . expression MULTIPLY expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . expression EXPONENTIATION expression
    (11) expression -> . INT
    (12) expression -> . FLOAT
    (13) expression -> . NAME
    (14) expression -> . LPAREN expression RPAREN

    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    NAME            shift and go to state 16
    LPAREN          shift and go to state 8

    expression                     shift and go to state 17

state 10

    (7) expression -> expression DIVIDE . expression
    (6) expression -> . expression MULTIPLY expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . expression EXPONENTIATION expression
    (11) expression -> . INT
    (12) expression -> . FLOAT
    (13) expression -> . NAME
    (14) expression -> . LPAREN expression RPAREN

    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    NAME            shift and go to state 16
    LPAREN          shift and go to state 8

    expression                     shift and go to state 18

state 11

    (8) expression -> expression PLUS . expression
    (6) expression -> . expression MULTIPLY expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . expression EXPONENTIATION expression
    (11) expression -> . INT
    (12) expression -> . FLOAT
    (13) expression -> . NAME
    (14) expression -> . LPAREN expression RPAREN

    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    NAME            shift and go to state 16
    LPAREN          shift and go to state 8

    expression                     shift and go to state 19

state 12

    (9) expression -> expression MINUS . expression
    (6) expression -> . expression MULTIPLY expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . expression EXPONENTIATION expression
    (11) expression -> . INT
    (12) expression -> . FLOAT
    (13) expression -> . NAME
    (14) expression -> . LPAREN expression RPAREN

    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    NAME            shift and go to state 16
    LPAREN          shift and go to state 8

    expression                     shift and go to state 20

state 13

    (10) expression -> expression EXPONENTIATION . expression
    (6) expression -> . expression MULTIPLY expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . expression EXPONENTIATION expression
    (11) expression -> . INT
    (12) expression -> . FLOAT
    (13) expression -> . NAME
    (14) expression -> . LPAREN expression RPAREN

    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    NAME            shift and go to state 16
    LPAREN          shift and go to state 8

    expression                     shift and go to state 21

state 14

    (4) var_assign -> NAME EQUALS . expression
    (5) var_assign -> NAME EQUALS . NORMSTRING
    (6) expression -> . expression MULTIPLY expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . expression EXPONENTIATION expression
    (11) expression -> . INT
    (12) expression -> . FLOAT
    (13) expression -> . NAME
    (14) expression -> . LPAREN expression RPAREN

    NORMSTRING      shift and go to state 23
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    NAME            shift and go to state 16
    LPAREN          shift and go to state 8

    expression                     shift and go to state 22

state 15

    (14) expression -> LPAREN expression . RPAREN
    (6) expression -> expression . MULTIPLY expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression
    (10) expression -> expression . EXPONENTIATION expression

    RPAREN          shift and go to state 24
    MULTIPLY        shift and go to state 9
    DIVIDE          shift and go to state 10
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    EXPONENTIATION  shift and go to state 13


state 16

    (13) expression -> NAME .

    RPAREN          reduce using rule 13 (expression -> NAME .)
    MULTIPLY        reduce using rule 13 (expression -> NAME .)
    DIVIDE          reduce using rule 13 (expression -> NAME .)
    PLUS            reduce using rule 13 (expression -> NAME .)
    MINUS           reduce using rule 13 (expression -> NAME .)
    EXPONENTIATION  reduce using rule 13 (expression -> NAME .)
    $end            reduce using rule 13 (expression -> NAME .)


state 17

    (6) expression -> expression MULTIPLY expression .
    (6) expression -> expression . MULTIPLY expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression
    (10) expression -> expression . EXPONENTIATION expression

    MULTIPLY        reduce using rule 6 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 6 (expression -> expression MULTIPLY expression .)
    PLUS            reduce using rule 6 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 6 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 6 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 6 (expression -> expression MULTIPLY expression .)
    EXPONENTIATION  shift and go to state 13

  ! EXPONENTIATION  [ reduce using rule 6 (expression -> expression MULTIPLY expression .) ]
  ! MULTIPLY        [ shift and go to state 9 ]
  ! DIVIDE          [ shift and go to state 10 ]
  ! PLUS            [ shift and go to state 11 ]
  ! MINUS           [ shift and go to state 12 ]


state 18

    (7) expression -> expression DIVIDE expression .
    (6) expression -> expression . MULTIPLY expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression
    (10) expression -> expression . EXPONENTIATION expression

    MULTIPLY        reduce using rule 7 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 7 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 7 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 7 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 7 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 7 (expression -> expression DIVIDE expression .)
    EXPONENTIATION  shift and go to state 13

  ! EXPONENTIATION  [ reduce using rule 7 (expression -> expression DIVIDE expression .) ]
  ! MULTIPLY        [ shift and go to state 9 ]
  ! DIVIDE          [ shift and go to state 10 ]
  ! PLUS            [ shift and go to state 11 ]
  ! MINUS           [ shift and go to state 12 ]


state 19

    (8) expression -> expression PLUS expression .
    (6) expression -> expression . MULTIPLY expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression
    (10) expression -> expression . EXPONENTIATION expression

    PLUS            reduce using rule 8 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 8 (expression -> expression PLUS expression .)
    $end            reduce using rule 8 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 8 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 9
    DIVIDE          shift and go to state 10
    EXPONENTIATION  shift and go to state 13

  ! MULTIPLY        [ reduce using rule 8 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 8 (expression -> expression PLUS expression .) ]
  ! EXPONENTIATION  [ reduce using rule 8 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 11 ]
  ! MINUS           [ shift and go to state 12 ]


state 20

    (9) expression -> expression MINUS expression .
    (6) expression -> expression . MULTIPLY expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression
    (10) expression -> expression . EXPONENTIATION expression

    PLUS            reduce using rule 9 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 9 (expression -> expression MINUS expression .)
    $end            reduce using rule 9 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 9 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 9
    DIVIDE          shift and go to state 10
    EXPONENTIATION  shift and go to state 13

  ! MULTIPLY        [ reduce using rule 9 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 9 (expression -> expression MINUS expression .) ]
  ! EXPONENTIATION  [ reduce using rule 9 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 11 ]
  ! MINUS           [ shift and go to state 12 ]


state 21

    (10) expression -> expression EXPONENTIATION expression .
    (6) expression -> expression . MULTIPLY expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression
    (10) expression -> expression . EXPONENTIATION expression

    MULTIPLY        reduce using rule 10 (expression -> expression EXPONENTIATION expression .)
    DIVIDE          reduce using rule 10 (expression -> expression EXPONENTIATION expression .)
    PLUS            reduce using rule 10 (expression -> expression EXPONENTIATION expression .)
    MINUS           reduce using rule 10 (expression -> expression EXPONENTIATION expression .)
    EXPONENTIATION  reduce using rule 10 (expression -> expression EXPONENTIATION expression .)
    $end            reduce using rule 10 (expression -> expression EXPONENTIATION expression .)
    RPAREN          reduce using rule 10 (expression -> expression EXPONENTIATION expression .)

  ! MULTIPLY        [ shift and go to state 9 ]
  ! DIVIDE          [ shift and go to state 10 ]
  ! PLUS            [ shift and go to state 11 ]
  ! MINUS           [ shift and go to state 12 ]
  ! EXPONENTIATION  [ shift and go to state 13 ]


state 22

    (4) var_assign -> NAME EQUALS expression .
    (6) expression -> expression . MULTIPLY expression
    (7) expression -> expression . DIVIDE expression
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression
    (10) expression -> expression . EXPONENTIATION expression

    $end            reduce using rule 4 (var_assign -> NAME EQUALS expression .)
    MULTIPLY        shift and go to state 9
    DIVIDE          shift and go to state 10
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    EXPONENTIATION  shift and go to state 13


state 23

    (5) var_assign -> NAME EQUALS NORMSTRING .

    $end            reduce using rule 5 (var_assign -> NAME EQUALS NORMSTRING .)


state 24

    (14) expression -> LPAREN expression RPAREN .

    MULTIPLY        reduce using rule 14 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 14 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 14 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 14 (expression -> LPAREN expression RPAREN .)
    EXPONENTIATION  reduce using rule 14 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 14 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 14 (expression -> LPAREN expression RPAREN .)

