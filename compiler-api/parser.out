Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> start
Rule 1     start -> statement
Rule 2     start -> var_assign
Rule 3     start -> empty
Rule 4     statement -> PRINT NORMSTRING
Rule 5     statement -> PRINT expression
Rule 6     statement -> PRINT expression COMMA expression
Rule 7     statement -> PRINT NORMSTRING COMMA expression
Rule 8     statement -> PRINT error
Rule 9     var_assign -> NAME EQUALS expression
Rule 10    var_assign -> NAME EQUALS NORMSTRING
Rule 11    expression -> expression MULTIPLY expression
Rule 12    expression -> expression DIVIDE expression
Rule 13    expression -> expression PLUS expression
Rule 14    expression -> expression MINUS expression
Rule 15    expression -> expression EXPONENTIATION expression
Rule 16    expression -> INT
Rule 17    expression -> FLOAT
Rule 18    expression -> NAME
Rule 19    expression -> LPAREN expression RPAREN
Rule 20    empty -> <empty>

Terminals, with rules where they appear

COMMA                : 6 7
COMMENT              : 
DIVIDE               : 12
EQUALS               : 9 10
EXPONENTIATION       : 15
FLOAT                : 17
INT                  : 16
LPAREN               : 19
MINUS                : 14
MULTIPLY             : 11
NAME                 : 9 10 18
NORMSTRING           : 4 7 10
PLUS                 : 13
PRINT                : 4 5 6 7 8
RPAREN               : 19
error                : 8

Nonterminals, with rules where they appear

empty                : 3
expression           : 5 6 6 7 9 11 11 12 12 13 13 14 14 15 15 19
start                : 0
statement            : 1
var_assign           : 2

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . statement
    (2) start -> . var_assign
    (3) start -> . empty
    (4) statement -> . PRINT NORMSTRING
    (5) statement -> . PRINT expression
    (6) statement -> . PRINT expression COMMA expression
    (7) statement -> . PRINT NORMSTRING COMMA expression
    (8) statement -> . PRINT error
    (9) var_assign -> . NAME EQUALS expression
    (10) var_assign -> . NAME EQUALS NORMSTRING
    (20) empty -> .

    PRINT           shift and go to state 5
    NAME            shift and go to state 6
    $end            reduce using rule 20 (empty -> .)

    start                          shift and go to state 1
    statement                      shift and go to state 2
    var_assign                     shift and go to state 3
    empty                          shift and go to state 4

state 1

    (0) S' -> start .



state 2

    (1) start -> statement .

    $end            reduce using rule 1 (start -> statement .)


state 3

    (2) start -> var_assign .

    $end            reduce using rule 2 (start -> var_assign .)


state 4

    (3) start -> empty .

    $end            reduce using rule 3 (start -> empty .)


state 5

    (4) statement -> PRINT . NORMSTRING
    (5) statement -> PRINT . expression
    (6) statement -> PRINT . expression COMMA expression
    (7) statement -> PRINT . NORMSTRING COMMA expression
    (8) statement -> PRINT . error
    (11) expression -> . expression MULTIPLY expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression EXPONENTIATION expression
    (16) expression -> . INT
    (17) expression -> . FLOAT
    (18) expression -> . NAME
    (19) expression -> . LPAREN expression RPAREN

    NORMSTRING      shift and go to state 7
    error           shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    NAME            shift and go to state 12
    LPAREN          shift and go to state 13

    expression                     shift and go to state 8

state 6

    (9) var_assign -> NAME . EQUALS expression
    (10) var_assign -> NAME . EQUALS NORMSTRING

    EQUALS          shift and go to state 14


state 7

    (4) statement -> PRINT NORMSTRING .
    (7) statement -> PRINT NORMSTRING . COMMA expression

    $end            reduce using rule 4 (statement -> PRINT NORMSTRING .)
    COMMA           shift and go to state 15


state 8

    (5) statement -> PRINT expression .
    (6) statement -> PRINT expression . COMMA expression
    (11) expression -> expression . MULTIPLY expression
    (12) expression -> expression . DIVIDE expression
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . EXPONENTIATION expression

    $end            reduce using rule 5 (statement -> PRINT expression .)
    COMMA           shift and go to state 16
    MULTIPLY        shift and go to state 17
    DIVIDE          shift and go to state 18
    PLUS            shift and go to state 19
    MINUS           shift and go to state 20
    EXPONENTIATION  shift and go to state 21


state 9

    (8) statement -> PRINT error .

    $end            reduce using rule 8 (statement -> PRINT error .)


state 10

    (16) expression -> INT .

    COMMA           reduce using rule 16 (expression -> INT .)
    MULTIPLY        reduce using rule 16 (expression -> INT .)
    DIVIDE          reduce using rule 16 (expression -> INT .)
    PLUS            reduce using rule 16 (expression -> INT .)
    MINUS           reduce using rule 16 (expression -> INT .)
    EXPONENTIATION  reduce using rule 16 (expression -> INT .)
    $end            reduce using rule 16 (expression -> INT .)
    RPAREN          reduce using rule 16 (expression -> INT .)


state 11

    (17) expression -> FLOAT .

    COMMA           reduce using rule 17 (expression -> FLOAT .)
    MULTIPLY        reduce using rule 17 (expression -> FLOAT .)
    DIVIDE          reduce using rule 17 (expression -> FLOAT .)
    PLUS            reduce using rule 17 (expression -> FLOAT .)
    MINUS           reduce using rule 17 (expression -> FLOAT .)
    EXPONENTIATION  reduce using rule 17 (expression -> FLOAT .)
    $end            reduce using rule 17 (expression -> FLOAT .)
    RPAREN          reduce using rule 17 (expression -> FLOAT .)


state 12

    (18) expression -> NAME .

    COMMA           reduce using rule 18 (expression -> NAME .)
    MULTIPLY        reduce using rule 18 (expression -> NAME .)
    DIVIDE          reduce using rule 18 (expression -> NAME .)
    PLUS            reduce using rule 18 (expression -> NAME .)
    MINUS           reduce using rule 18 (expression -> NAME .)
    EXPONENTIATION  reduce using rule 18 (expression -> NAME .)
    $end            reduce using rule 18 (expression -> NAME .)
    RPAREN          reduce using rule 18 (expression -> NAME .)


state 13

    (19) expression -> LPAREN . expression RPAREN
    (11) expression -> . expression MULTIPLY expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression EXPONENTIATION expression
    (16) expression -> . INT
    (17) expression -> . FLOAT
    (18) expression -> . NAME
    (19) expression -> . LPAREN expression RPAREN

    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    NAME            shift and go to state 12
    LPAREN          shift and go to state 13

    expression                     shift and go to state 22

state 14

    (9) var_assign -> NAME EQUALS . expression
    (10) var_assign -> NAME EQUALS . NORMSTRING
    (11) expression -> . expression MULTIPLY expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression EXPONENTIATION expression
    (16) expression -> . INT
    (17) expression -> . FLOAT
    (18) expression -> . NAME
    (19) expression -> . LPAREN expression RPAREN

    NORMSTRING      shift and go to state 24
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    NAME            shift and go to state 12
    LPAREN          shift and go to state 13

    expression                     shift and go to state 23

state 15

    (7) statement -> PRINT NORMSTRING COMMA . expression
    (11) expression -> . expression MULTIPLY expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression EXPONENTIATION expression
    (16) expression -> . INT
    (17) expression -> . FLOAT
    (18) expression -> . NAME
    (19) expression -> . LPAREN expression RPAREN

    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    NAME            shift and go to state 12
    LPAREN          shift and go to state 13

    expression                     shift and go to state 25

state 16

    (6) statement -> PRINT expression COMMA . expression
    (11) expression -> . expression MULTIPLY expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression EXPONENTIATION expression
    (16) expression -> . INT
    (17) expression -> . FLOAT
    (18) expression -> . NAME
    (19) expression -> . LPAREN expression RPAREN

    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    NAME            shift and go to state 12
    LPAREN          shift and go to state 13

    expression                     shift and go to state 26

state 17

    (11) expression -> expression MULTIPLY . expression
    (11) expression -> . expression MULTIPLY expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression EXPONENTIATION expression
    (16) expression -> . INT
    (17) expression -> . FLOAT
    (18) expression -> . NAME
    (19) expression -> . LPAREN expression RPAREN

    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    NAME            shift and go to state 12
    LPAREN          shift and go to state 13

    expression                     shift and go to state 27

state 18

    (12) expression -> expression DIVIDE . expression
    (11) expression -> . expression MULTIPLY expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression EXPONENTIATION expression
    (16) expression -> . INT
    (17) expression -> . FLOAT
    (18) expression -> . NAME
    (19) expression -> . LPAREN expression RPAREN

    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    NAME            shift and go to state 12
    LPAREN          shift and go to state 13

    expression                     shift and go to state 28

state 19

    (13) expression -> expression PLUS . expression
    (11) expression -> . expression MULTIPLY expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression EXPONENTIATION expression
    (16) expression -> . INT
    (17) expression -> . FLOAT
    (18) expression -> . NAME
    (19) expression -> . LPAREN expression RPAREN

    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    NAME            shift and go to state 12
    LPAREN          shift and go to state 13

    expression                     shift and go to state 29

state 20

    (14) expression -> expression MINUS . expression
    (11) expression -> . expression MULTIPLY expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression EXPONENTIATION expression
    (16) expression -> . INT
    (17) expression -> . FLOAT
    (18) expression -> . NAME
    (19) expression -> . LPAREN expression RPAREN

    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    NAME            shift and go to state 12
    LPAREN          shift and go to state 13

    expression                     shift and go to state 30

state 21

    (15) expression -> expression EXPONENTIATION . expression
    (11) expression -> . expression MULTIPLY expression
    (12) expression -> . expression DIVIDE expression
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (15) expression -> . expression EXPONENTIATION expression
    (16) expression -> . INT
    (17) expression -> . FLOAT
    (18) expression -> . NAME
    (19) expression -> . LPAREN expression RPAREN

    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    NAME            shift and go to state 12
    LPAREN          shift and go to state 13

    expression                     shift and go to state 31

state 22

    (19) expression -> LPAREN expression . RPAREN
    (11) expression -> expression . MULTIPLY expression
    (12) expression -> expression . DIVIDE expression
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . EXPONENTIATION expression

    RPAREN          shift and go to state 32
    MULTIPLY        shift and go to state 17
    DIVIDE          shift and go to state 18
    PLUS            shift and go to state 19
    MINUS           shift and go to state 20
    EXPONENTIATION  shift and go to state 21


state 23

    (9) var_assign -> NAME EQUALS expression .
    (11) expression -> expression . MULTIPLY expression
    (12) expression -> expression . DIVIDE expression
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . EXPONENTIATION expression

    $end            reduce using rule 9 (var_assign -> NAME EQUALS expression .)
    MULTIPLY        shift and go to state 17
    DIVIDE          shift and go to state 18
    PLUS            shift and go to state 19
    MINUS           shift and go to state 20
    EXPONENTIATION  shift and go to state 21


state 24

    (10) var_assign -> NAME EQUALS NORMSTRING .

    $end            reduce using rule 10 (var_assign -> NAME EQUALS NORMSTRING .)


state 25

    (7) statement -> PRINT NORMSTRING COMMA expression .
    (11) expression -> expression . MULTIPLY expression
    (12) expression -> expression . DIVIDE expression
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . EXPONENTIATION expression

    $end            reduce using rule 7 (statement -> PRINT NORMSTRING COMMA expression .)
    MULTIPLY        shift and go to state 17
    DIVIDE          shift and go to state 18
    PLUS            shift and go to state 19
    MINUS           shift and go to state 20
    EXPONENTIATION  shift and go to state 21


state 26

    (6) statement -> PRINT expression COMMA expression .
    (11) expression -> expression . MULTIPLY expression
    (12) expression -> expression . DIVIDE expression
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . EXPONENTIATION expression

    $end            reduce using rule 6 (statement -> PRINT expression COMMA expression .)
    MULTIPLY        shift and go to state 17
    DIVIDE          shift and go to state 18
    PLUS            shift and go to state 19
    MINUS           shift and go to state 20
    EXPONENTIATION  shift and go to state 21


state 27

    (11) expression -> expression MULTIPLY expression .
    (11) expression -> expression . MULTIPLY expression
    (12) expression -> expression . DIVIDE expression
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . EXPONENTIATION expression

    COMMA           reduce using rule 11 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 11 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 11 (expression -> expression MULTIPLY expression .)
    PLUS            reduce using rule 11 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 11 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 11 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 11 (expression -> expression MULTIPLY expression .)
    EXPONENTIATION  shift and go to state 21

  ! EXPONENTIATION  [ reduce using rule 11 (expression -> expression MULTIPLY expression .) ]
  ! MULTIPLY        [ shift and go to state 17 ]
  ! DIVIDE          [ shift and go to state 18 ]
  ! PLUS            [ shift and go to state 19 ]
  ! MINUS           [ shift and go to state 20 ]


state 28

    (12) expression -> expression DIVIDE expression .
    (11) expression -> expression . MULTIPLY expression
    (12) expression -> expression . DIVIDE expression
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . EXPONENTIATION expression

    COMMA           reduce using rule 12 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 12 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 12 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 12 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 12 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 12 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 12 (expression -> expression DIVIDE expression .)
    EXPONENTIATION  shift and go to state 21

  ! EXPONENTIATION  [ reduce using rule 12 (expression -> expression DIVIDE expression .) ]
  ! MULTIPLY        [ shift and go to state 17 ]
  ! DIVIDE          [ shift and go to state 18 ]
  ! PLUS            [ shift and go to state 19 ]
  ! MINUS           [ shift and go to state 20 ]


state 29

    (13) expression -> expression PLUS expression .
    (11) expression -> expression . MULTIPLY expression
    (12) expression -> expression . DIVIDE expression
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . EXPONENTIATION expression

    COMMA           reduce using rule 13 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 13 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 13 (expression -> expression PLUS expression .)
    $end            reduce using rule 13 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 13 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 17
    DIVIDE          shift and go to state 18
    EXPONENTIATION  shift and go to state 21

  ! MULTIPLY        [ reduce using rule 13 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 13 (expression -> expression PLUS expression .) ]
  ! EXPONENTIATION  [ reduce using rule 13 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 19 ]
  ! MINUS           [ shift and go to state 20 ]


state 30

    (14) expression -> expression MINUS expression .
    (11) expression -> expression . MULTIPLY expression
    (12) expression -> expression . DIVIDE expression
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . EXPONENTIATION expression

    COMMA           reduce using rule 14 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 14 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 14 (expression -> expression MINUS expression .)
    $end            reduce using rule 14 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 14 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 17
    DIVIDE          shift and go to state 18
    EXPONENTIATION  shift and go to state 21

  ! MULTIPLY        [ reduce using rule 14 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 14 (expression -> expression MINUS expression .) ]
  ! EXPONENTIATION  [ reduce using rule 14 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 19 ]
  ! MINUS           [ shift and go to state 20 ]


state 31

    (15) expression -> expression EXPONENTIATION expression .
    (11) expression -> expression . MULTIPLY expression
    (12) expression -> expression . DIVIDE expression
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression
    (15) expression -> expression . EXPONENTIATION expression

    COMMA           reduce using rule 15 (expression -> expression EXPONENTIATION expression .)
    MULTIPLY        reduce using rule 15 (expression -> expression EXPONENTIATION expression .)
    DIVIDE          reduce using rule 15 (expression -> expression EXPONENTIATION expression .)
    PLUS            reduce using rule 15 (expression -> expression EXPONENTIATION expression .)
    MINUS           reduce using rule 15 (expression -> expression EXPONENTIATION expression .)
    EXPONENTIATION  reduce using rule 15 (expression -> expression EXPONENTIATION expression .)
    $end            reduce using rule 15 (expression -> expression EXPONENTIATION expression .)
    RPAREN          reduce using rule 15 (expression -> expression EXPONENTIATION expression .)

  ! MULTIPLY        [ shift and go to state 17 ]
  ! DIVIDE          [ shift and go to state 18 ]
  ! PLUS            [ shift and go to state 19 ]
  ! MINUS           [ shift and go to state 20 ]
  ! EXPONENTIATION  [ shift and go to state 21 ]


state 32

    (19) expression -> LPAREN expression RPAREN .

    COMMA           reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    EXPONENTIATION  reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 19 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 19 (expression -> LPAREN expression RPAREN .)

