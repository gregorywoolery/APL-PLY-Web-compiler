
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightCOMMAnonassocPRINTleftPLUSMINUSleftMULTIPLYDIVIDEleftEXPONENTIATIONMULTIPLYCOMMA COMMENT DIVIDE EQUALS EXPONENTIATION FLOAT INT LPAREN MINUS MULTIPLY NAME NORMSTRING PLUS PRINT RPAREN\n    start : statement\n          | var_assign\n          | empty\n    \n    statement : PRINT NORMSTRING \n              | PRINT expression \n              | PRINT expression COMMA expression\n              | PRINT NORMSTRING COMMA expression\n    \n    statement : PRINT error\n    \n    var_assign : NAME EQUALS expression\n               | NAME EQUALS NORMSTRING\n    \n    expression : expression MULTIPLY expression\n               | expression DIVIDE expression\n               | expression PLUS expression\n               | expression MINUS expression\n               | expression EXPONENTIATION expression\n    \n    expression : INT\n               | FLOAT\n    \n    expression : NAME\n    \n    expression : LPAREN expression RPAREN\n    \n    empty :\n    '
    
_lr_action_items = {'PRINT':([0,],[5,]),'NAME':([0,5,13,14,15,16,17,18,19,20,21,],[6,12,12,12,12,12,12,12,12,12,12,]),'$end':([0,1,2,3,4,7,8,9,10,11,12,23,24,25,26,27,28,29,30,31,32,],[-20,0,-1,-2,-3,-4,-5,-8,-16,-17,-18,-9,-10,-7,-6,-11,-12,-13,-14,-15,-19,]),'NORMSTRING':([5,14,],[7,24,]),'error':([5,],[9,]),'INT':([5,13,14,15,16,17,18,19,20,21,],[10,10,10,10,10,10,10,10,10,10,]),'FLOAT':([5,13,14,15,16,17,18,19,20,21,],[11,11,11,11,11,11,11,11,11,11,]),'LPAREN':([5,13,14,15,16,17,18,19,20,21,],[13,13,13,13,13,13,13,13,13,13,]),'EQUALS':([6,],[14,]),'COMMA':([7,8,10,11,12,27,28,29,30,31,32,],[15,16,-16,-17,-18,-11,-12,-13,-14,-15,-19,]),'MULTIPLY':([8,10,11,12,22,23,25,26,27,28,29,30,31,32,],[17,-16,-17,-18,17,17,17,17,-11,-12,17,17,-15,-19,]),'DIVIDE':([8,10,11,12,22,23,25,26,27,28,29,30,31,32,],[18,-16,-17,-18,18,18,18,18,-11,-12,18,18,-15,-19,]),'PLUS':([8,10,11,12,22,23,25,26,27,28,29,30,31,32,],[19,-16,-17,-18,19,19,19,19,-11,-12,-13,-14,-15,-19,]),'MINUS':([8,10,11,12,22,23,25,26,27,28,29,30,31,32,],[20,-16,-17,-18,20,20,20,20,-11,-12,-13,-14,-15,-19,]),'EXPONENTIATION':([8,10,11,12,22,23,25,26,27,28,29,30,31,32,],[21,-16,-17,-18,21,21,21,21,21,21,21,21,-15,-19,]),'RPAREN':([10,11,12,22,27,28,29,30,31,32,],[-16,-17,-18,32,-11,-12,-13,-14,-15,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'statement':([0,],[2,]),'var_assign':([0,],[3,]),'empty':([0,],[4,]),'expression':([5,13,14,15,16,17,18,19,20,21,],[8,22,23,25,26,27,28,29,30,31,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> statement','start',1,'p_start','compile.py',121),
  ('start -> var_assign','start',1,'p_start','compile.py',122),
  ('start -> empty','start',1,'p_start','compile.py',123),
  ('statement -> PRINT NORMSTRING','statement',2,'p_statement_print','compile.py',130),
  ('statement -> PRINT expression','statement',2,'p_statement_print','compile.py',131),
  ('statement -> PRINT expression COMMA expression','statement',4,'p_statement_print','compile.py',132),
  ('statement -> PRINT NORMSTRING COMMA expression','statement',4,'p_statement_print','compile.py',133),
  ('statement -> PRINT error','statement',2,'p_statement_print_error','compile.py',143),
  ('var_assign -> NAME EQUALS expression','var_assign',3,'p_var_assign','compile.py',149),
  ('var_assign -> NAME EQUALS NORMSTRING','var_assign',3,'p_var_assign','compile.py',150),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','compile.py',158),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','compile.py',159),
  ('expression -> expression PLUS expression','expression',3,'p_expression','compile.py',160),
  ('expression -> expression MINUS expression','expression',3,'p_expression','compile.py',161),
  ('expression -> expression EXPONENTIATION expression','expression',3,'p_expression','compile.py',162),
  ('expression -> INT','expression',1,'p_expression_int_float','compile.py',169),
  ('expression -> FLOAT','expression',1,'p_expression_int_float','compile.py',170),
  ('expression -> NAME','expression',1,'p_expression_var','compile.py',176),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_parenthesis','compile.py',183),
  ('empty -> <empty>','empty',0,'p_empty','compile.py',199),
]
