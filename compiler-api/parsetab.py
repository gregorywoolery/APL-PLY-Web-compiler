
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightCOMMAnonassocPRINTleftPLUSMINUSleftMULTIPLYDIVIDEleftEXPONENTIATIONMULTIPLYCOMMA COMMENT DIVIDE EQUALS EXPONENTIATION FLOAT INT LPAREN MINUS MULTIPLY NAME NORMSTRING PLUS PRINT RPAREN\n    start : expression\n          | statement\n          | var_assign\n          | empty\n    \n    statement : PRINT NORMSTRING \n              | PRINT expression \n              | PRINT expression COMMA expression\n              | PRINT NORMSTRING COMMA expression\n    \n    statement : PRINT error\n    \n    var_assign : NAME EQUALS expression\n               | NAME EQUALS NORMSTRING\n    \n    expression : expression MULTIPLY expression\n               | expression DIVIDE expression\n               | expression PLUS expression\n               | expression MINUS expression\n               | expression EXPONENTIATION expression\n    \n    expression : INT\n               | FLOAT\n    \n    expression : NAME\n    \n    expression : LPAREN expression RPAREN\n    \n    empty :\n    '
    
_lr_action_items = {'INT':([0,9,10,11,12,13,14,15,16,30,31,],[6,6,6,6,6,6,6,6,6,6,6,]),'FLOAT':([0,9,10,11,12,13,14,15,16,30,31,],[7,7,7,7,7,7,7,7,7,7,7,]),'NAME':([0,9,10,11,12,13,14,15,16,30,31,],[8,18,18,18,18,18,18,18,18,18,18,]),'LPAREN':([0,9,10,11,12,13,14,15,16,30,31,],[9,9,9,9,9,9,9,9,9,9,9,]),'PRINT':([0,],[10,]),'$end':([0,1,2,3,4,5,6,7,8,18,19,20,21,22,23,24,25,26,27,28,29,32,33,],[-21,0,-1,-2,-3,-4,-17,-18,-19,-19,-5,-6,-9,-12,-13,-14,-15,-16,-10,-11,-20,-8,-7,]),'MULTIPLY':([2,6,7,8,17,18,20,22,23,24,25,26,27,29,32,33,],[11,-17,-18,-19,11,-19,11,-12,-13,11,11,-16,11,-20,11,11,]),'DIVIDE':([2,6,7,8,17,18,20,22,23,24,25,26,27,29,32,33,],[12,-17,-18,-19,12,-19,12,-12,-13,12,12,-16,12,-20,12,12,]),'PLUS':([2,6,7,8,17,18,20,22,23,24,25,26,27,29,32,33,],[13,-17,-18,-19,13,-19,13,-12,-13,-14,-15,-16,13,-20,13,13,]),'MINUS':([2,6,7,8,17,18,20,22,23,24,25,26,27,29,32,33,],[14,-17,-18,-19,14,-19,14,-12,-13,-14,-15,-16,14,-20,14,14,]),'EXPONENTIATION':([2,6,7,8,17,18,20,22,23,24,25,26,27,29,32,33,],[15,-17,-18,-19,15,-19,15,15,15,15,15,-16,15,-20,15,15,]),'RPAREN':([6,7,17,18,22,23,24,25,26,29,],[-17,-18,29,-19,-12,-13,-14,-15,-16,-20,]),'COMMA':([6,7,18,19,20,22,23,24,25,26,29,],[-17,-18,-19,30,31,-12,-13,-14,-15,-16,-20,]),'EQUALS':([8,],[16,]),'NORMSTRING':([10,16,],[19,28,]),'error':([10,],[21,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'expression':([0,9,10,11,12,13,14,15,16,30,31,],[2,17,20,22,23,24,25,26,27,32,33,]),'statement':([0,],[3,]),'var_assign':([0,],[4,]),'empty':([0,],[5,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> expression','start',1,'p_start','compiler.py',109),
  ('start -> statement','start',1,'p_start','compiler.py',110),
  ('start -> var_assign','start',1,'p_start','compiler.py',111),
  ('start -> empty','start',1,'p_start','compiler.py',112),
  ('statement -> PRINT NORMSTRING','statement',2,'p_statement_print','compiler.py',119),
  ('statement -> PRINT expression','statement',2,'p_statement_print','compiler.py',120),
  ('statement -> PRINT expression COMMA expression','statement',4,'p_statement_print','compiler.py',121),
  ('statement -> PRINT NORMSTRING COMMA expression','statement',4,'p_statement_print','compiler.py',122),
  ('statement -> PRINT error','statement',2,'p_statement_print_error','compiler.py',132),
  ('var_assign -> NAME EQUALS expression','var_assign',3,'p_var_assign','compiler.py',138),
  ('var_assign -> NAME EQUALS NORMSTRING','var_assign',3,'p_var_assign','compiler.py',139),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','compiler.py',147),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','compiler.py',148),
  ('expression -> expression PLUS expression','expression',3,'p_expression','compiler.py',149),
  ('expression -> expression MINUS expression','expression',3,'p_expression','compiler.py',150),
  ('expression -> expression EXPONENTIATION expression','expression',3,'p_expression','compiler.py',151),
  ('expression -> INT','expression',1,'p_expression_int_float','compiler.py',158),
  ('expression -> FLOAT','expression',1,'p_expression_int_float','compiler.py',159),
  ('expression -> NAME','expression',1,'p_expression_var','compiler.py',165),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_parenthesis','compiler.py',171),
  ('empty -> <empty>','empty',0,'p_empty','compiler.py',183),
]
