from asyncio import constants
from turtle import width
import ply.lex as lex
import ply.yacc as yacc
import sys
import dearpygui.dearpygui as dpg
# s.strip('""')
# Create a list to hold all of the token names
tokens = [

    'NORMSTRING',
    'INT',
    'FLOAT',
    'NAME',
    'PLUS',
    'MINUS',
    'DIVIDE',
    'MULTIPLY',
    'EXPONENTIATION',
    'EQUALS',
    
    'LPAREN',
    'RPAREN',
    'COMMENT',
    'PRINT',
    'COMMA'
]

# Use regular expressions to define what each token is
t_PLUS = r'\+'
t_MINUS = r'\-'
t_MULTIPLY = r'\*'
t_DIVIDE = r'\/'
t_EQUALS = r'\='
t_LPAREN = r'\('
t_RPAREN = r'\)'
t_NORMSTRING =  r'\"([^\\\n]|(\\.))*?\"'
t_EXPONENTIATION = r'\^'
t_COMMA = r'\,'



# Ply's special t_ignore variable allows us to define characters the lexer will ignore.
# We're ignoring spaces.
# A string containing ignored characters (spaces and tabs)
t_ignore = '  \t\r'
t_ignore_COMMENT = r'\#.*'

# More complicated tokens, such as tokens that are more than 1 character in length
# are defined using functions.
# A float is 1 or more numbers followed by a dot (.) followed by 1 or more numbers again.
def t_FLOAT(t):
    r'\d+\.\d+'
    t.value = float(t.value)
    return t

# An int is 1 or more numbers.
def t_INT(t):
    r'\d+'
    t.value = int(t.value)
    return t

# Define a rule so we can track line numbers
def t_NEWLINE(t):
    r'\n'
    t.lexer.lineno += t.value.count("\n")
    print('line: ', t.lexer.lineno)

def t_PRINT(t):
    r'PRINT'
    t.type = 'PRINT'
    return t

# A NAME is a variable name. A variable can be 1 or more characters in length.
# The first character must be in the ranges a-z A-Z or be an underscore.
# Any character following the first character can be a-z A-Z 0-9 or an underscore.
def t_NAME(t):
    r'[a-zA-Z_][a-zA-Z_0-9]*'
    t.type = 'NAME'
    return t

# Skip the current token and output 'Illegal characters' using the special Ply t_error function.
def t_error(t):
    print("Error line: %d: LEXER: Illegal characters '%s'" % (t.lexer.lineno, t.value[0]))
    # STOP LEXER
    # ====================
    t.lexer.skip(1)

# Build the lexer
lexer = lex.lex()

# lex.input("1234\n3434@")

#PARSER
# Ensure our parser understands the correct order of operations.
# The precedence variable is a special Ply variable.

precedence = (
    ('right','COMMA'),
    ('nonassoc', 'PRINT'),
    ('left', 'PLUS', 'MINUS'),
    ('left', 'MULTIPLY', 'DIVIDE'),
    ('left', 'EXPONENTIATION', 'MULTIPLY'),
)

# Define our grammar. We allow var_assign's and empty's.
def p_start(p):
    '''
    start : expression
          | statement
          | var_assign
          | empty
    '''
    run(p[1])


def p_statement_print(p):
    '''
    statement : PRINT NORMSTRING 
              | PRINT expression 
              | PRINT expression COMMA expression
              | PRINT NORMSTRING COMMA expression
    '''
    if len(p) == 5: 
        p[0] = ('PRINT', p[2], p[4])
    else:
        p[0] = ('PRINT', p[2])


def p_statement_print_error(p):
    '''
    statement : PRINT error
    '''
    print("Syntax error in print statement. Bad expression")

def p_var_assign(p):
    '''
    var_assign : NAME EQUALS expression
               | NAME EQUALS NORMSTRING
    '''
    # Build our tree
    p[0] = ('=', p[1], p[3])

# Expressions are recursive.
def p_expression(p):
    '''
    expression : expression MULTIPLY expression
               | expression DIVIDE expression
               | expression PLUS expression
               | expression MINUS expression
               | expression EXPONENTIATION expression
    '''
    # Build our tree.
    p[0] = (p[2], p[1], p[3])

def p_expression_int_float(p):
    '''
    expression : INT
               | FLOAT
    '''
    p[0] = p[1]

def p_expression_var(p):
    '''
    expression : NAME
    '''
    p[0] = ('var', p[1])

def p_expression_parenthesis(p):
    '''
    expression : LPAREN expression RPAREN
    '''
    p[0] = p[2]
	

# # Output to the user that there is an error in the input as it doesn't conform to our grammar.
# # p_error is another special Ply function.
def p_error(p):
    print("Syntax error found!", p)

def p_empty(p):
    '''
    empty :
    '''
    p[0] = None

# Build the parser
parser = yacc.yacc()

# Create the environment upon which we will store and retreive variables from.
env = {}

# The run function is our recursive function that 'walks' the tree generated by our parser.
def run(p):
    global env
    if type(p) == tuple:
        if p[0] == '+':
            return run(p[1]) + run(p[2]) #eg. 5 + 5
        elif p[0] == '-':
            return run(p[1]) - run(p[2]) #eg. 5 - 5
        elif p[0] == '*':
            return run(p[1]) * run(p[2]) #eg. 5 * 5
        elif p[0] == '/':
            return run(p[1]) / run(p[2]) #eg. 5 / 5
        elif p[0] == '^':
            return run(p[1]) ** run(p[2]) #eg 5 ^ 5
        elif p[0] == '=':
            env[p[1]] = run(p[2])         #eg. a = 5
            return ''
        
        #Print Syntax Handler
        elif p[0] == 'PRINT':
            
            if len(p) == 3: 
                value1 = run(p[1])
                value2 = run(p[2])
                print(value1, value2) #Create python file and add print statement -> create exe & machine code file
            else:
                value1 = run(p[1])
                print(value1)   #Create python file and add print statement -> create exe & machine code file


        elif p[0] == 'var':
            if p[1] not in env:
                return 'Undeclared variable found!'
            else:
                return env[p[1]]
    else:
        return p

# Create a REPL to provide a way to interface with our calculator.
# while True:
#     # tok = lexer.token()
#     # if not tok:
#     #     break
#     # print(tok.type, tok.value, tok.lineno, tok.lexpos)
#     try:
#         s = input('>> ')
#     except EOFError:
#         break
#     parser.parse(s)

def codeAccept(code):
    # Place code in separate lines
    arr = code.splitlines()
    # print(arr)

    for line in arr:
        parser.parse(line)
    
    # # parser.parse(code)

    # compiledTo = {
    #     "compiled": 'res'
    # }

    # return compiledTo


def writeToFile(line):
    compiledFile = open("compiledFile.py", 'a')
    compiledFile.write(line)
    compiledFile.close()

dpg.create_context()


#run buttion function
def btn_callback_run(sender, app_data, user_data):
    # print(f"sender is: {sender}")
    # print(f"app_data is: {app_data}")
    codeAccept(dpg.get_value("inputtext"))



with dpg.window(tag="PLY-Interpreter"):
    dpg.add_text("SnakePY")

    runButton = dpg.add_button(label="Run", callback=btn_callback_run)
    Clear = dpg.add_button(label="Clear", callback=btn_callback_run)

    input_textbox = dpg.add_input_text( 
            tag="inputtext",
            width=400, 
            height=200,
            multiline=True, 
        )
    dpg.add_text(" ")
    dpg.add_text("Errors")
    error_textbox = dpg.add_input_text(hint="Erros are shown here")
    dpg.add_text(" ")
    # dpg.add_button(label="Run", callback=btn_callback_run, user_data=dpg.get_value(input_textbox))


dpg.create_viewport(title='PLY Compiler', width=500, height=500)
dpg.setup_dearpygui()
dpg.show_viewport()
dpg.set_primary_window("PLY-Interpreter", True)
dpg.start_dearpygui()
dpg.destroy_context()